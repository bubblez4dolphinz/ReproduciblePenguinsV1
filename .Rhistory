write.csv(penguins_raw, "data/penguins_raw.csv")
penguins_clean <- cleaning_penguins(penguins_raw)
write.csv(penguins_clean, "data/penguins_clean.csv")
exploratory_fig <- ggplot(na.omit(penguins_clean), aes(x = sex, y = body_mass_g, colour=sex)) +
geom_jitter(width = 0.2, height = 0) +
facet_wrap(vars(species), ncol = 3) +
labs(title="Relationship of sex and species to body mass", x="Species", y="Body mass (g)") +
scale_x_discrete(labels = c("FEMALE" = "F", "MALE" = "M")) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom")
exploratory_fig
if (!dir.exists("figures")) {
dir.create("figures")
}
svglite("figures/fig01_exploratory.svg",
width = 5.9, height = 5.9) #saving figure to wd
exploratory_fig
while (!is.null(dev.list()))  dev.off()
exploratory_fig
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
#Fitting the linear model
bm_factors <- lm(body_mass_g ~ species*sex, rm.adelie)
#Testing assumptions in model
###normality
par(mfrow = c(1, 2))
plot(bm_factors, which = 1)
plot(bm_factors, which = 2)
###equal variance
var.test(body_mass_g ~ species, rm.adelie, alternative = "two.sided")
var.test(body_mass_g ~ sex, rm.adelie, alternative = "two.sided")
summary(bm_factors) #summary table of model outputs
anova(bm_factors) #results of running an anova test
summary(bm_factors) #summary table of model outputs
anova(bm_factors) #results of running an anova test
#post-hoc Tukey test
TukeyHSD(aov(bm_factors))
#Making an interaction plot
interaction_plot <- ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
#extracting info from anova table
anova_result <- aov(bm_factors)
anova_df <- tidy(anova_result)  %>%
select(-df, -sumsq, -meansq) %>%
filter(term != "Residuals") %>%
rename("F.value" = "statistic")
view(anova_df)
#adding anova table to interaction plot
Interaction <- interaction_plot +
annotate(geom = "table",x = 0.25,y = 6000,
label = list(cbind(anova_df))) +
labs(title="Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
Interaction
svglite("figures/fig02_results.svg",
width = 5.9, height = 5.9) #saving figure to wd
Interaction
while (!is.null(dev.list()))  dev.off()
renv::status()
mean_bd <- aggregate(bill_depth_mm ~ sex, data = penguins, FUN = mean, na.rm = TRUE)
ggplot(mean_bd, aes(x="", y=log(bill_depth_mm), fill=sex)) +
geom_bar(stat = "identity", position = "stack", width=0.1) +
scale_fill_manual(values=c("red", "darkgreen"))+
labs(title="log(mean bill depth) of each sex", x="Penguins", y="log(mean bill depth) (mm)") +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
renv::status()
?renv::status()
check_and_load_packages <- function(packages) {
# Check if each package is already installed, and if not, install it
for (package in packages) {
if (!requireNamespace(package, quietly = TRUE)) {
renv::install(package)
}
library(package, character.only = TRUE) # Loads every package
}
}
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
#Install and load packages
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
renv::status(
renv::status()
```{r packages, include=FALSE}
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
knitr::opts_chunk$set(echo = TRUE)
setwd(".") #set working directory to where the file is saved
rm(list = ls(all.names = TRUE)) #clear workspace
renv::init()
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
#Install and load packages
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
knitr::opts_chunk$set(echo = TRUE)
renv::init()
setwd(".") #set working directory to where the file is saved
rm(list = ls(all.names = TRUE)) #clear workspace
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
# Load the functions
source(c("functions/cleaning.r", "functions/packages.r"))
# Load the functions
source("functions/cleaning.r")
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
theme_set(theme_minimal()) #I want all the plots to be the same theme
mean_bd <- aggregate(bill_depth_mm ~ sex, data = penguins, FUN = mean, na.rm = TRUE)
ggplot(mean_bd, aes(x="", y=log(bill_depth_mm), fill=sex)) +
geom_bar(stat = "identity", position = "stack", width=0.1) +
scale_fill_manual(values=c("red", "darkgreen"))+
labs(title="log(mean bill depth) of each sex", x="Penguins", y="log(mean bill depth) (mm)") +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
if (!dir.exists("data")) {
dir.create("data")
}
write.csv(penguins_raw, "data/penguins_raw.csv")
penguins_clean <- cleaning_penguins(penguins_raw)
write.csv(penguins_clean, "data/penguins_clean.csv")
exploratory_fig <- ggplot(na.omit(penguins_clean), aes(x = sex, y = body_mass_g, colour=sex)) +
geom_jitter(width = 0.2, height = 0) +
facet_wrap(vars(species), ncol = 3) +
labs(title="Relationship of sex and species to body mass", x="Species", y="Body mass (g)") +
scale_x_discrete(labels = c("FEMALE" = "F", "MALE" = "M")) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom")
exploratory_fig
if (!dir.exists("figures")) {
dir.create("figures")
}
svglite("figures/fig01_exploratory.svg",
width = 5.9, height = 5.9) #saving figure to wd
exploratory_fig
while (!is.null(dev.list()))  dev.off()
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
#Fitting the linear model
bm_factors <- lm(body_mass_g ~ species*sex, rm.adelie)
#Testing assumptions in model
###normality
par(mfrow = c(1, 2))
plot(bm_factors, which = 1)
plot(bm_factors, which = 2)
###equal variance
var.test(body_mass_g ~ species, rm.adelie, alternative = "two.sided")
var.test(body_mass_g ~ sex, rm.adelie, alternative = "two.sided")
summary(bm_factors) #summary table of model outputs
anova(bm_factors) #results of running an anova test
#post-hoc Tukey test
TukeyHSD(aov(bm_factors))
#Making an interaction plot
interaction_plot <- ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
#extracting info from anova table
anova_result <- aov(bm_factors)
anova_df <- tidy(anova_result)  %>%
select(-df, -sumsq, -meansq) %>%
filter(term != "Residuals") %>%
rename("F.value" = "statistic")
view(anova_df)
#adding anova table to interaction plot
Interaction <- interaction_plot +
annotate(geom = "table",x = 0.25,y = 6000,
label = list(cbind(anova_df))) +
labs(title="Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
Interaction
svglite("figures/fig02_results.svg",
width = 5.9, height = 5.9) #saving figure to wd
Interaction
while (!is.null(dev.list()))  dev.off()
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
install.packages("ggpmisc")
install.packages("Matrix", lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
install.packages("vctrs")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages("vctrs")
packageVersion("Matrix")
install.packages("Matrix", lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
packageVersion("Matrix")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
packageVersion("tidyr")
packageVersion("cli")
library(cli)
detach("package:cli", unload = TRUE)
packageVersion("cli")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
devtools::install_version("cli", version = "3.6.1", repos = "http://cran.us.r-project.org")
install.packages("devtools", lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages("devtools", lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
> devtools::install_version("cli", version = "3.6.1", repos = "http://cran.us.r-project.org")
devtools::install_version("cli", version = "3.6.1", repos = "http://cran.us.r-project.org")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
install.packages(c("cli", "vctrs"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
install.packages(c("cli", "vctrs"))
install.packages(c("cli", "vctrs"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "KernSmooth", "lattice", "MASS", "Matrix", "mgcv", "nlme", "nnet", "rpart", "spatial", "survival"), lib = "C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
library(cli)
devtools::install_version("cli", version = "3.6.1", repos = "http://cran.us.r-project.org")
library(cli)
renv::snapshot()
renv::status()
renv::snapshot(confirm = FALSE)
check_and_load_packages <- function(packages) {
# Check if each package is already installed, and if not, install it
# Also, check if the installed package version is up to date, and update if needed
for (package in packages) {
if (!requireNamespace(package, quietly = TRUE)) {
renv::install(package)
} else {
current_version <- packageVersion(package)
available_version <- renv::available(package)
#check if current and available version match
if (!is.null(available_version) && package_version(current_version) < package_version(available_version)) {
renv::update(package) #update if possible
}
}
library(package, character.only = TRUE) # Loads every package
}
}
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
check_and_load_packages1 <- function(packages) {
# Check if each package is already installed, and if not, install it
# Also, check if the installed package version is up to date, and update if needed
for (package in packages) {
if (!requireNamespace(package, quietly = TRUE)) {
renv::install(package)
} else {
outdated_packages <- renv::outdated()
if (package %in% outdated_packages) {
renv::update(package)
}
}
library(package, character.only = TRUE) # Loads every package
}
}
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages1(packages)
check_and_load_packages2 <- function(packages) {
# Check if each package is already installed, and if not, install it
# Also, check if the installed package version is up to date, and update if needed
for (package in packages) {
if (!requireNamespace(package, quietly = TRUE)) {
renv::install(package)
} else {
# Retrieve available package versions from CRAN
available_versions <- as.data.frame(available.packages())
# Check if the package is installed and compare versions
if (package %in% rownames(installed.packages()) &&
package %in% available_versions$Package &&
package_version(package) < package_version(available_versions$Version[package == available_versions$Package])) {
renv::update(package)
}
}
library(package, character.only = TRUE) # Loads every package
}
}
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages2(packages)
theme_set(theme_minimal()) #I want all the plots to be the same theme
packageVersion("palmerpenguins")
mean_bd <- aggregate(bill_depth_mm ~ sex, data = penguins, FUN = mean, na.rm = TRUE)
ggplot(mean_bd, aes(x="", y=log(bill_depth_mm), fill=sex)) +
geom_bar(stat = "identity", position = "stack", width=0.1) +
scale_fill_manual(values=c("red", "darkgreen"))+
labs(title="log(mean bill depth) of each sex", x="Penguins", y="log(mean bill depth) (mm)") +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
check_and_load_packages3 <- function(packages) {
for (package in packages) {
# Check if the package is not installed, then install it
if (!(package %in% installed.packages())) {
message(paste("Installing", package))
renv::install(package)
}
# Check if the package has a newer version available on CRAN
if (package %in% available.packages()[, "Package"]) {
available_version <- available.packages()[package, "Version"]
installed_version <- packageVersion(package)
# Compare versions and update if installed version is older
if (package_version(installed_version) < package_version(available_version)) {
message(paste("Updating", package, "from", installed_version, "to", available_version))
renv::update(package)
}
}
# Load the package
message(paste("Loading", package))
library(package, character.only = TRUE)
}
}
check_and_load_packages3(packages)
install.packages("Matrix", lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
check_and_load_packages3(packages)
install.packages("Matrix", lib="C:/Users/flora/AppData/Local/R/cache/R/renv/sandbox/R-4.2/x86_64-w64-mingw32/611f223d")
check_and_load_packages3(packages)
check_and_load_packages3 <- function(packages) {
for (package in packages) {
# Check if the package is not installed, then install it
if (!(package %in% installed.packages())) {
message(paste("Installing", package))
renv::install(package)
}
# Check if the package has a newer version available on CRAN
if (package %in% available.packages()[, "Package"]) {
available_version <- available.packages()[package, "Version"]
installed_version <- packageVersion(package)
# Compare versions and update if installed version is older
if (package_version(installed_version) < package_version(available_version)) {
message(paste("Updating", package, "from", installed_version, "to", available_version))
renv::update(package)
}
}
# Load the package
message(paste("Loading", package))
library(package, character.only = TRUE)
}
}
renv::init()
setwd(".") #set working directory to where the file is saved
rm(list = ls(all.names = TRUE)) #clear workspace
# Load the functions
source("functions/cleaning.r")
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages2(packages)
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages3(packages)
theme_set(theme_minimal()) #I want all the plots to be the same theme
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages3(packages)
theme_set(theme_minimal()) #I want all the plots to be the same theme
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
check_and_load_packages(packages)
source("functions/packages.r")
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
interaction_plot <- ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
#Fitting the linear model
bm_factors <- lm(body_mass_g ~ species*sex, rm.adelie)
#Testing assumptions in model
###normality
par(mfrow = c(1, 2))
plot(bm_factors, which = 1)
plot(bm_factors, which = 2)
###equal variance
var.test(body_mass_g ~ species, rm.adelie, alternative = "two.sided")
var.test(body_mass_g ~ sex, rm.adelie, alternative = "two.sided")
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
#Fitting the linear model
bm_factors <- lm(body_mass_g ~ species*sex, rm.adelie)
#Testing assumptions in model
###normality
par(mfrow = c(1, 2))
plot(bm_factors, which = 1)
plot(bm_factors, which = 2)
###equal variance
var.test(body_mass_g ~ species, rm.adelie, alternative = "two.sided")
var.test(body_mass_g ~ sex, rm.adelie, alternative = "two.sided")
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
if (!dir.exists("data")) {
dir.create("data")
}
write.csv(penguins_raw, "data/penguins_raw.csv")
penguins_clean <- cleaning_penguins(penguins_raw)
write.csv(penguins_clean, "data/penguins_clean.csv")
warnings()
exploratory_fig <- ggplot(na.omit(penguins_clean), aes(x = sex, y = body_mass_g, colour=sex)) +
geom_jitter(width = 0.2, height = 0) +
facet_wrap(vars(species), ncol = 3) +
labs(title="Relationship of sex and species to body mass", x="Species", y="Body mass (g)") +
scale_x_discrete(labels = c("FEMALE" = "F", "MALE" = "M")) +
scale_color_brewer(palette = "Set1") +
theme(legend.position = "bottom")
exploratory_fig
if (!dir.exists("figures")) {
dir.create("figures")
}
svglite("figures/fig01_exploratory.svg",
width = 5.9, height = 5.9) #saving figure to wd
exploratory_fig
while (!is.null(dev.list()))  dev.off()
# Make sure your code prints.
rm.adelie <- penguins_clean %>%
filter(!species == "Adelie") #removing adelie species
#Fitting the linear model
bm_factors <- lm(body_mass_g ~ species*sex, rm.adelie)
#Testing assumptions in model
###normality
par(mfrow = c(1, 2))
plot(bm_factors, which = 1)
plot(bm_factors, which = 2)
###equal variance
var.test(body_mass_g ~ species, rm.adelie, alternative = "two.sided")
var.test(body_mass_g ~ sex, rm.adelie, alternative = "two.sided")
summary(bm_factors) #summary table of model outputs
anova(bm_factors) #results of running an anova test
#post-hoc Tukey test
TukeyHSD(aov(bm_factors))
interaction_plot <- ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
#extracting info from anova table
anova_result <- aov(bm_factors)
anova_df <- tidy(anova_result)  %>%
select(-df, -sumsq, -meansq) %>%
filter(term != "Residuals") %>%
rename("F.value" = "statistic")
# Create a string for the ANOVA table
table_text <- paste(anova_df$term, "F =", round(anova_df$F.value, 2), collapse = "\n")
interaction_plot +
geom_text(aes(x = 1, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
# Create a string for the ANOVA table
table_text <- paste(anova_df$term, "F =", round(anova_df$F.value, 2), "p =", round(anova_df$p.value, 2), collapse = "\n")
interaction_plot +
geom_text(aes(x = 1, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
# Create a string for the ANOVA table
table_text <- paste(anova_df$term, "F =", round(anova_df$F.value, 2), "p =", (anova_df$p.value, 2), collapse = "\n")
# Create a string for the ANOVA table
table_text <- paste(anova_df$term, "F =", round(anova_df$F.value, 2), "p =", anova_df$p.value, collapse = "\n")
interaction_plot +
geom_text(aes(x = 1, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
interaction_plot +
geom_text(aes(x = 0, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
interaction_plot +
geom_text(aes(x = 0, y = 6000, label = table_text, color = "black"), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
interaction_plot +
geom_text(aes(x = 0, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex") +
geom_text(aes(x = 0, y = 6000, label = table_text), hjust = 0, vjust = 0, size = 4) +
labs(title = "Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
#Making an interaction plot
interaction_plot <- ggplot(na.omit(rm.adelie), aes(x = species, y = body_mass_g, color = sex)) +
geom_point(position = position_dodge(width = 0.5)) +
geom_line(aes(group = sex), position = position_dodge(width = 0.5)) +
labs(x = "Species", y = "Body Mass (g)", color = "Sex")
#extracting info from anova table
anova_result <- aov(bm_factors)
anova_df <- tidy(anova_result)  %>%
select(-df, -sumsq, -meansq) %>%
filter(term != "Residuals") %>%
rename("F.value" = "statistic")
#adding anova table to interaction plot
Interaction <- interaction_plot +
annotate(geom = "table",x = 0.25,y = 6000,
label = list(cbind(anova_df))) +
labs(title="Interaction Plot of Body Mass by Species and Sex with ANOVA table of results")
Interaction
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc")
check_and_load_packages(packages)
packages <- c("palmerpenguins", "tidyverse", "janitor", "broom", "svglite", "ggpmisc", "Matrix")
check_and_load_packages(packages)
